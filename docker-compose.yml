version: "2"
services:
  kafdrop:
    image: obsidiandynamics/kafdrop
    restart: "no"
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
    depends_on:
      - "kafka"
  kafka:
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 9092"]
      interval: 3s
      timeout: 3s
      retries: 10

# For testing purposes, we'll add the producer and consumer to the same docker-compose file.
  database:
    image: mymongo
    restart: "no"
    ports:
      - "27017:27017"  
    
  producer:
    image: producer
    restart: "no"
    environment:
      API_URL: ${API_URL}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy

  consumer:
    image: consumer
    restart: "no"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      MONGODB_URL: ${MONGODB_URL}
      MONGODB_DB_NAME: ${MONGODB_DB_NAME}
      MONGODB_COLLECTION: ${MONGODB_COLLECTION}
    depends_on:
      kafka:
        condition: service_healthy
      database:
        condition: service_started

  backend:
    image: backend
    restart: "no"
    environment:
      MONGODB_URL: ${MONGODB_URL}
      MONGODB_DB_NAME: ${MONGODB_DB_NAME}
      MONGODB_COLLECTION: ${MONGODB_COLLECTION}
      RAPIDAPI_KEY: ${RAPIDAPI_KEY}
      GEOAPI_BASE_URL: ${GEOAPI_BASE_URL}
      HOST: ${HOST}
      PORT: ${PORT}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      kafka:
        condition: service_healthy
      consumer:
        condition: service_started
      producer:
        condition: service_started
      database:
        condition: service_started

  frontend:
    image: frontend
    restart: "no"
    ports:
      - "3000:3000"
    environment:
      REACT_APP_BACKEND_URL: ${REACT_APP_BACKEND_URL}
    depends_on:
      backend:
        condition: service_started