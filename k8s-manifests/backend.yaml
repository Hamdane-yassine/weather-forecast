# HPA Configuration for Backend Deployment
apiVersion: autoscaling/v2  # HPA API version
kind: HorizontalPodAutoscaler  # Defines this as an HPA resource
metadata:
  name: backend-hpa  # Name of the HPA
  namespace: sdtd-project  # Namespace where the HPA is deployed

# Specification of the HPA
spec:
  # Reference to the Deployment that this HPA will scale
  scaleTargetRef:
    apiVersion: apps/v1  # API version of the target resource
    kind: Deployment  # Type of the target resource
    name: backend  # Name of the Deployment that the HPA will scale

  # Minimum and maximum number of pod replicas
  minReplicas: 1  # Minimum number of replicas
  maxReplicas: 10  # Maximum number of replicas

  # Behavior of scaling down
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300  # How long to wait before another scale down operation can be performed after the current one
      policies:
        - type: Pods  # Scale down based on the number of Pods
          value: 1  # Number of Pods to scale down at a time
          periodSeconds: 60  # Interval between successive scale down operations

  # Metrics for scaling
  metrics:
    - type: Resource  # Type of the metric to be used for scaling
      resource:
        name: cpu  # The resource to be monitored
        target:
          type: Utilization  # Utilization target type
          averageUtilization: 50  # Target CPU utilization percentage for scaling
---
# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  namespace: sdtd-project
data:
  HOST: "0.0.0.0"
  PORT: "3001"
  KAFKA_NUM_PARTITIONS: "1"

---

# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: sdtd-project
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      initContainers:
      - name: check-kafka
        image: busybox:1.28
        command:
        - sh
        - -c
        - until nslookup kafka; do echo waiting for kafka; sleep 2; done
      - name: check-database
        image: busybox:1.28
        command:
        - sh
        - -c
        - until nslookup database; do echo waiting for database; sleep 2; done
      containers:
      - name: backend
        image: ghbadr/backend:d94545f2
        ports:
        - containerPort: 3001
        # resources:
        #   requests:
        #     cpu: "30m"
        #     memory: "15Mi"
        #   limits:
        #     cpu: "250m"
        #     memory: "300Mi"
        livenessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
        env:
        - name: MONGODB_URL
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: MONGODB_URL
        - name: MONGODB_DB_NAME
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: MONGODB_DB_NAME
        - name: MONGODB_COLLECTION
          valueFrom:
            configMapKeyRef:
              name: database-config
              key: MONGODB_COLLECTION
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: kafka-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PORT
        - name: KAFKA_NUM_PARTITIONS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: KAFKA_NUM_PARTITIONS

---

# Service
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: sdtd-project
spec:
  type: ClusterIP
  ports:
  - port: 3001
    targetPort: 3001
  selector:
    app: backend

---
# NodePort Service
apiVersion: v1
kind: Service
metadata:
  name: backend-nodeport
  namespace: sdtd-project
spec:
  type: NodePort
  ports:
  - port: 3001
    targetPort: 3001
  selector:
    app: backend